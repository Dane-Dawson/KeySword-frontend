{"ast":null,"code":"var _jsxFileName = \"/Users/tomastobar/Development/code/flatiron_projects/KeySword/keysword-frontend/src/GameShow.js\";\nimport React, { Component } from 'react'; //WILL HAVE TO REMOBVE THIS ONCE THE INFORMATION FOR THE BACKGROUND IMAGE IS CAPTURED FROM THE INITIAL FETCH\n\nimport LevelOneBackGround from './sprites/maps/level_one_background.png';\n\nclass GameShow extends Component {\n  constructor() {\n    super();\n    this.state = {\n      canvasWidth: 400,\n      canvasHeight: 400,\n      context: null,\n      levelBackgroundImage: \"\",\n      tileSheetColumns: 0,\n      tileHeight: 0,\n      tileWidth: 0,\n      matrixColumns: 0,\n      matrix: []\n    };\n  }\n\n  componentDidMount() {\n    const cvs = document.getElementById(\"gameCanvas\");\n    const ctx = cvs.getContext('2d');\n    this.setState({\n      context: ctx\n    });\n    const tile = new Image();\n    tile.src = tile_sheet;\n\n    tile.onload = () => {\n      for (let i = this.state.world.length - 1; i > -1; --i) {\n        let worldMatrix = this.state.world[i];\n        console.log(`WorldMatrix ${worldMatrix}`);\n        let source_x = worldMatrix % this.state.tileSheetColumns * (this.state.tileWidth * 2);\n        console.log(`source_x${source_x}`);\n        let source_y = Math.floor(worldMatrix / this.state.tileSheetColumns) * (this.state.tileHeight * 2);\n        console.log(`source_y${source_y}`);\n        let destination_x = i % this.state.matrixColumns * this.state.tileWidth;\n        console.log(`destination_x${destination_x}`);\n        let destination_y = Math.floor(i / this.state.matrixColumns) * this.state.tileHeight;\n        console.log(`destination_y${destination_y}`); // debugger\n\n        ctx.drawImage(tile, source_x, source_y, 32, 32, destination_x, destination_y, this.state.tileWidth, this.state.tileHeight);\n      }\n    }; // `url(${LevelOneBackGround})`\n\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"gameCanvas\",\n      style: {\n        width: `${this.state.canvasWidth}px`,\n        height: `${this.state.canvasHeight}px`,\n        paddingRight: '0',\n        paddingLeft: '0',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        display: 'block',\n        border: \"20px solid white\",\n        backgroundColor: 'lightGreen'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default GameShow;","map":{"version":3,"sources":["/Users/tomastobar/Development/code/flatiron_projects/KeySword/keysword-frontend/src/GameShow.js"],"names":["React","Component","LevelOneBackGround","GameShow","constructor","state","canvasWidth","canvasHeight","context","levelBackgroundImage","tileSheetColumns","tileHeight","tileWidth","matrixColumns","matrix","componentDidMount","cvs","document","getElementById","ctx","getContext","setState","tile","Image","src","tile_sheet","onload","i","world","length","worldMatrix","console","log","source_x","source_y","Math","floor","destination_x","destination_y","drawImage","render","width","height","paddingRight","paddingLeft","marginLeft","marginRight","display","border","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\n//WILL HAVE TO REMOBVE THIS ONCE THE INFORMATION FOR THE BACKGROUND IMAGE IS CAPTURED FROM THE INITIAL FETCH\nimport LevelOneBackGround from './sprites/maps/level_one_background.png'\n\nclass GameShow extends Component {\n    constructor() {\n        super();\n        this.state = {\n            canvasWidth: 400,\n            canvasHeight: 400,\n            context: null,\n            levelBackgroundImage: \"\",\n            tileSheetColumns: 0,\n            tileHeight: 0,\n            tileWidth: 0,\n            matrixColumns: 0,\n            matrix: []\n\n        }\n    }\n\n    componentDidMount() {\n        const cvs = document.getElementById(\"gameCanvas\")\n        const ctx = cvs.getContext('2d')\n        this.setState({ context: ctx })\n        const tile = new Image()\n        tile.src = tile_sheet\n        tile.onload = () => {\n\n            for (let i = this.state.world.length - 1; i > -1; --i) {\n\n                let worldMatrix = this.state.world[i]\n                console.log(`WorldMatrix ${worldMatrix}`)\n\n                let source_x = (worldMatrix % this.state.tileSheetColumns) * (this.state.tileWidth * 2)\n                console.log(`source_x${source_x}`)\n\n                let source_y = Math.floor(worldMatrix / this.state.tileSheetColumns) * (this.state.tileHeight * 2)\n                console.log(`source_y${source_y}`)\n\n                let destination_x = (i % this.state.matrixColumns) * this.state.tileWidth\n                console.log(`destination_x${destination_x}`)\n\n                let destination_y = Math.floor(i / this.state.matrixColumns) * this.state.tileHeight\n                console.log(`destination_y${destination_y}`)\n                // debugger\n                ctx.drawImage(tile, source_x, source_y, 32, 32, destination_x, destination_y, this.state.tileWidth, this.state.tileHeight)\n\n            }\n        }\n\n        // `url(${LevelOneBackGround})`\n    }\n    render() {\n        return (\n            <canvas id=\"gameCanvas\" style={{\n                width: `${this.state.canvasWidth}px`,\n                height: `${this.state.canvasHeight}px`,\n                paddingRight: '0',\n                paddingLeft: '0',\n                marginLeft: 'auto',\n                marginRight: 'auto',\n                display: 'block',\n                border: \"20px solid white\",\n                backgroundColor: 'lightGreen'\n            }}\n            >\n\n            </canvas>\n        )\n    }\n}\nexport default GameShow;"]},"metadata":{},"sourceType":"module"}