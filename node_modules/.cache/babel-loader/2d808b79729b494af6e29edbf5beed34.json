{"ast":null,"code":"var _jsxFileName = \"/Users/tomastobar/Development/code/flatiron_projects/KeySword/keysword-frontend/src/GameShow.js\";\nimport React, { Component } from 'react';\nimport TileSheetOne from './sprites/maps/tile_sheet01.png'; //WILL HAVE TO REMOBVE THIS ONCE THE INFORMATION FOR THE BACKGROUND IMAGE IS CAPTURED FROM THE INITIAL FETCH\n\nimport LevelOneBackGround from './sprites/maps/level_one_background.png';\n\nclass GameShow extends Component {\n  constructor() {\n    super();\n\n    this.renderBackGound = () => {\n      const bgTile = new Image();\n      bgTile.src = TileSheetOne;\n\n      bgTile.onload = () => {\n        for (let i = this.state.backgroundMatrix.length - 1; i > -1; --i) {\n          let worldMatrix = this.state.backgroundMatrix[i];\n          let source_x = worldMatrix % this.state.tileSheetColumns * this.state.tileWidth;\n          let source_y = Math.floor(worldMatrix / this.state.tileSheetColumns) * this.state.tileHeight;\n          let destination_x = i % this.state.matrixColumns * this.state.tileWidth;\n          let destination_y = Math.floor(i / this.state.matrixColumns) * this.state.tileHeight;\n          this.state.context.drawImage(bgTile, source_x, source_y, 16, 16, destination_x, destination_y, this.state.tileWidth, this.state.tileHeight);\n        }\n      };\n    };\n\n    this.renderMiddleGround = () => {\n      const mgTile = new Image();\n      mgTile.src = TileSheetOne;\n\n      mgTile.onload = () => {\n        for (let i = this.state.middlegroundMatrix.length - 1; i > -1; --i) {\n          let worldMatrix = this.state.middlegroundMatrix[i];\n          let source_x = worldMatrix % this.state.tileSheetColumns * this.state.tileWidth;\n          let source_y = Math.floor(worldMatrix / this.state.tileSheetColumns) * this.state.tileHeight;\n          let destination_x = i % this.state.matrixColumns * this.state.tileWidth;\n          let destination_y = Math.floor(i / this.state.matrixColumns) * this.state.tileHeight;\n          this.state.context.drawImage(mgTile, source_x, source_y, 16, 16, destination_x, destination_y, this.state.tileWidth, this.state.tileHeight);\n        }\n      };\n    };\n\n    this.renderForeground = () => {\n      const tile = new Image();\n      tile.src = TileSheetOne;\n\n      tile.onload = () => {\n        for (let i = this.state.foregroundMatrix.length - 1; i > -1; --i) {\n          let worldMatrix = this.state.foregroundMatrix[i];\n          console.log(`WorldMatrix ${worldMatrix}`);\n          let source_x = worldMatrix % this.state.tileSheetColumns * this.state.tileWidth;\n          console.log(`source_x${source_x}`);\n          let source_y = Math.floor(worldMatrix / this.state.tileSheetColumns) * this.state.tileHeight;\n          console.log(`source_y${source_y}`);\n          let destination_x = i % this.state.matrixColumns * this.state.tileWidth;\n          console.log(`destination_x${destination_x}`);\n          let destination_y = Math.floor(i / this.state.matrixColumns) * this.state.tileHeight;\n          console.log(`destination_y${destination_y}`); // debugger\n\n          this.state.context.drawImage(tile, source_x, source_y, 16, 16, destination_x, destination_y, this.state.tileWidth, this.state.tileHeight); //        void ctx.drawImage(image,      sx,       sy, sWidth, sHeight,            dx,            dy,              bdWidth,               dHeight);\n        }\n      };\n    };\n\n    this.state = {\n      canvasWidth: 800,\n      canvasHeight: 400,\n      context: null,\n      levelBackgroundImage: null,\n      tileSheetColumns: 8,\n      tileHeight: 16,\n      tileWidth: 16,\n      matrixColumns: 19,\n      foregroundMatrix: [64, 64, 43, 35, 17, 28, 20, 64, 64, 64, 64, 64, 64, 64, 64, 43, 4, 17, 17, 64, 64, 64, 43, 35, 17, 11, 20, 64, 64, 64, 64, 64, 64, 64, 64, 16, 17, 17, 64, 64, 64, 64, 24, 4, 17, 11, 9, 10, 64, 64, 64, 64, 64, 64, 16, 17, 17, 64, 64, 64, 64, 64, 24, 25, 25, 25, 44, 64, 64, 64, 64, 64, 64, 43, 4, 17, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 16, 17, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 43, 25, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 19, 9, 9, 9, 9, 9, 20, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 19, 9, 12, 17, 17, 17, 17, 17, 11, 9, 9, 9, 9, 9, 9, 20, 64, 64, 19, 12, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 11, 9, 9, 12, 17, 17, 17, 17, 17, 17, 17, 17],\n      middlegroundMatrix: [46, 59, 64, 64, 64, 64, 64, 64, 64, 58, 38, 38, 64, 64, 64, 64, 64, 64, 64, 59, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 38, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 21, 23, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 29, 54, 51, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 22, 55, 55, 31, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64],\n      backgroundMatrix: [33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56]\n    };\n  }\n  /*\n  00 01 02 03 04 05 06 07\n  08 09 10 11 12 13 14 15 \n  16 17 18 19 20 21 22 23\n  24 25 26 27 28 29 30 31\n  32 33 34 35 36 37 38 39\n  40 41 42 43 44 45 46 47 \n  48 49 50 51 52 53 54 55\n  56 57 58 59 60 61 62 63 \n      */\n\n\n  componentDidMount() {\n    const cvs = document.getElementById(\"gameCanvas\");\n    const ctx = cvs.getContext('2d');\n    this.setState({\n      context: ctx\n    });\n    this.renderBackGound();\n    this.renderMiddleGround();\n    this.renderForeground();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"gameCanvas\",\n      style: {\n        width: `${this.state.canvasWidth}px`,\n        height: `${this.state.canvasHeight}px`,\n        paddingRight: '0',\n        paddingLeft: '0',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        display: 'block',\n        border: \"20px solid white\",\n        backgroundColor: 'grey'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default GameShow; //NOTES:\n// The hard numbers to drawImage for level one background is: 300x150","map":{"version":3,"sources":["/Users/tomastobar/Development/code/flatiron_projects/KeySword/keysword-frontend/src/GameShow.js"],"names":["React","Component","TileSheetOne","LevelOneBackGround","GameShow","constructor","renderBackGound","bgTile","Image","src","onload","i","state","backgroundMatrix","length","worldMatrix","source_x","tileSheetColumns","tileWidth","source_y","Math","floor","tileHeight","destination_x","matrixColumns","destination_y","context","drawImage","renderMiddleGround","mgTile","middlegroundMatrix","renderForeground","tile","foregroundMatrix","console","log","canvasWidth","canvasHeight","levelBackgroundImage","componentDidMount","cvs","document","getElementById","ctx","getContext","setState","render","width","height","paddingRight","paddingLeft","marginLeft","marginRight","display","border","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport TileSheetOne from './sprites/maps/tile_sheet01.png'\n\n//WILL HAVE TO REMOBVE THIS ONCE THE INFORMATION FOR THE BACKGROUND IMAGE IS CAPTURED FROM THE INITIAL FETCH\nimport LevelOneBackGround from './sprites/maps/level_one_background.png'\n\nclass GameShow extends Component {\n    constructor() {\n        super();\n        this.state = {\n            canvasWidth: 800,\n            canvasHeight: 400,\n            context: null,\n            levelBackgroundImage: null,\n            tileSheetColumns: 8,\n            tileHeight: 16,\n            tileWidth: 16,\n            matrixColumns: 19,\n            foregroundMatrix: [\n                64, 64, 43, 35, 17, 28, 20, 64, 64, 64, 64, 64, 64, 64, 64, 43, 4, 17, 17,\n                64, 64, 64, 43, 35, 17, 11, 20, 64, 64, 64, 64, 64, 64, 64, 64, 16, 17, 17,\n                64, 64, 64, 64, 24, 4, 17, 11, 9, 10, 64, 64, 64, 64, 64, 64, 16, 17, 17,\n                64, 64, 64, 64, 64, 24, 25, 25, 25, 44, 64, 64, 64, 64, 64, 64, 43, 4, 17,\n                64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 16, 17,\n                64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 43, 25,\n                64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 19, 9, 9, 9, 9, 9,\n                20, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 19, 9, 12, 17, 17, 17, 17, 17,\n                11, 9, 9, 9, 9, 9, 9, 20, 64, 64, 19, 12, 17, 17, 17, 17, 17, 17, 17,\n                17, 17, 17, 17, 17, 17, 17, 11, 9, 9, 12, 17, 17, 17, 17, 17, 17, 17, 17,\n            ],\n            middlegroundMatrix: [\n                46, 59, 64, 64, 64, 64, 64, 64, 64, 58, 38, 38, 64, 64, 64, 64, 64, 64, 64,\n                59, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 38, 64, 64, 64, 64, 64,\n                64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n                64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n                64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n                64, 21, 23, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n                64, 29, 54, 51, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n                22, 55, 55, 31, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n                64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n                64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,\n            ],\n            backgroundMatrix: [\n                33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,\n                40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,\n                41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,\n                48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n                49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,\n                57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,\n                56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,\n                56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,\n                56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,\n                56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,\n\n            ]\n        }\n    }\n\n    /*\n    00 01 02 03 04 05 06 07\n    08 09 10 11 12 13 14 15 \n    16 17 18 19 20 21 22 23\n    24 25 26 27 28 29 30 31\n    32 33 34 35 36 37 38 39\n    40 41 42 43 44 45 46 47 \n    48 49 50 51 52 53 54 55\n    56 57 58 59 60 61 62 63 \n   \n    */\n    componentDidMount() {\n        const cvs = document.getElementById(\"gameCanvas\")\n        const ctx = cvs.getContext('2d')\n        this.setState({ context: ctx })\n        this.renderBackGound()\n        this.renderMiddleGround()\n        this.renderForeground()\n    }\n\n\n\n    renderBackGound = () => {\n        const bgTile = new Image()\n        bgTile.src = TileSheetOne\n        bgTile.onload = () => {\n\n            for (let i = this.state.backgroundMatrix.length - 1; i > -1; --i) {\n                let worldMatrix = this.state.backgroundMatrix[i]\n                let source_x = (worldMatrix % this.state.tileSheetColumns) * this.state.tileWidth\n                let source_y = Math.floor(worldMatrix / this.state.tileSheetColumns) * this.state.tileHeight\n                let destination_x = (i % this.state.matrixColumns) * this.state.tileWidth\n                let destination_y = Math.floor(i / this.state.matrixColumns) * this.state.tileHeight\n                this.state.context.drawImage(bgTile, source_x, source_y, 16, 16, destination_x, destination_y, this.state.tileWidth, this.state.tileHeight)\n            }\n        }\n    }\n\n    renderMiddleGround = () => {\n        const mgTile = new Image()\n        mgTile.src = TileSheetOne\n        mgTile.onload = () => {\n\n            for (let i = this.state.middlegroundMatrix.length - 1; i > -1; --i) {\n\n                let worldMatrix = this.state.middlegroundMatrix[i]\n                let source_x = (worldMatrix % this.state.tileSheetColumns) * this.state.tileWidth\n                let source_y = Math.floor(worldMatrix / this.state.tileSheetColumns) * this.state.tileHeight\n                let destination_x = (i % this.state.matrixColumns) * this.state.tileWidth\n                let destination_y = Math.floor(i / this.state.matrixColumns) * this.state.tileHeight\n                this.state.context.drawImage(mgTile, source_x, source_y, 16, 16, destination_x, destination_y, this.state.tileWidth, this.state.tileHeight)\n            }\n        }\n\n    }\n\n    renderForeground = () => {\n        const tile = new Image()\n        tile.src = TileSheetOne\n        tile.onload = () => {\n\n            for (let i = this.state.foregroundMatrix.length - 1; i > -1; --i) {\n\n                let worldMatrix = this.state.foregroundMatrix[i]\n                console.log(`WorldMatrix ${worldMatrix}`)\n\n                let source_x = (worldMatrix % this.state.tileSheetColumns) * this.state.tileWidth\n                console.log(`source_x${source_x}`)\n\n                let source_y = Math.floor(worldMatrix / this.state.tileSheetColumns) * this.state.tileHeight\n                console.log(`source_y${source_y}`)\n\n                let destination_x = (i % this.state.matrixColumns) * this.state.tileWidth\n                console.log(`destination_x${destination_x}`)\n\n                let destination_y = Math.floor(i / this.state.matrixColumns) * this.state.tileHeight\n                console.log(`destination_y${destination_y}`)\n                // debugger\n                this.state.context.drawImage(tile, source_x, source_y, 16, 16, destination_x, destination_y, this.state.tileWidth, this.state.tileHeight)\n                //        void ctx.drawImage(image,      sx,       sy, sWidth, sHeight,            dx,            dy,              bdWidth,               dHeight);\n            }\n        }\n    }\n\n\n    render() {\n        return (\n            <canvas id=\"gameCanvas\" style={{\n                width: `${this.state.canvasWidth}px`,\n                height: `${this.state.canvasHeight}px`,\n                paddingRight: '0',\n                paddingLeft: '0',\n                marginLeft: 'auto',\n                marginRight: 'auto',\n                display: 'block',\n                border: \"20px solid white\",\n                backgroundColor: 'grey'\n            }}\n            >\n\n            </canvas>\n        )\n    }\n}\nexport default GameShow;\n\n\n//NOTES:\n// The hard numbers to drawImage for level one background is: 300x150"]},"metadata":{},"sourceType":"module"}