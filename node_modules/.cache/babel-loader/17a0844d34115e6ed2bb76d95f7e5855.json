{"ast":null,"code":"var _jsxFileName = \"/Users/dane/Development/code/KeySword-frontend/src/App.js\";\nimport React, { Component } from \"react\";\nimport GameHeader from \"./GameHeader\";\nimport GameShow from \"./GameShow\";\nimport GameFooter from \"./GameFooter\";\nimport UserBar from \"./UserBar\";\nimport background from \"./sprites/backgrounds/stonebackground.jpg\";\nimport footerlogo from \"./sprites/backgrounds/footerlogo.png\";\nlet baseURL = \"http://localhost:3000/\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.fetchLevel = () => {\n      return fetch(baseURL + \"levels\").then(resp => resp.json()).then(level => this.setState({\n        level\n      }));\n    };\n\n    this.fetchUsers = () => {\n      return fetch(baseURL + \"users\").then(resp => resp.json()).then(users => this.setState({\n        users\n      }));\n    };\n\n    this.fetchMonsters = () => {\n      return fetch(baseURL + \"monsters\").then(resp => resp.json()).then(monsters => this.setState({\n        monsters\n      }));\n    };\n\n    this.createWordsArray = wordsString => {\n      let words = wordsString.split(\", \");\n      this.shuffleArray(words);\n      console.log(words);\n      return words;\n    };\n\n    this.logOut = () => {\n      this.setState({\n        level: [],\n        monsters: [],\n        users: [],\n        activeUser: [],\n        words: [],\n        bossWords: [],\n        activeWords: [],\n        wordCounter: 0,\n        currentScore: 0,\n        gameTimer: 120,\n        gameRunning: false\n      });\n    };\n\n    this.checkValue = word => {\n      const index = this.state.activeWords.indexOf(word);\n\n      if (index > -1) {\n        this.setState(this.state.activeWords.splice(index, 1));\n      }\n    };\n\n    this.addWordToActiveWord = () => {\n      let wordArray = this.state.words;\n      let wordCounter = this.state.wordCounter;\n\n      if (wordArray.length === wordCounter) {\n        wordCounter = 0;\n      }\n\n      let newWord = wordArray[wordCounter];\n      this.setState({\n        activeWords: [...this.state.activeWords, newWord]\n      });\n      wordCounter += 1;\n      this.setState({\n        wordCounter\n      });\n    };\n\n    this.setActiveWordsGameStart = () => {\n      let wordArray = this.state.words;\n      let wordCounter = this.state.wordCounter;\n      let newWords = wordArray.slice(0, 5);\n      this.setState({\n        activeWords: [...this.state.activeWords, ...newWords]\n      });\n      wordCounter += 5;\n      this.setState({\n        wordCounter\n      });\n    };\n\n    this.addScore = () => {\n      let currentScore = this.state.currentScore;\n      currentScore += 1;\n      this.setState({\n        currentScore\n      });\n    };\n\n    this.keepActiveWordsAtFive = () => {\n      if (this.state.activeWords.length < 5) {\n        this.addWordToActiveWord();\n      }\n    };\n\n    this.shuffleArray = array => {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n    };\n\n    this.createUser = userObject => {\n      console.log(userObject);\n      fetch(baseURL + \"users\", userObject);\n    };\n\n    this.UserLogin = (username, password) => {\n      console.log(username, password);\n      this.setState({\n        words: this.createWordsArray(this.state.level[0].words)\n      });\n      this.setState({\n        bossWords: this.createWordsArray(this.state.level[0].bossWords)\n      });\n      let activeUser = this.state.users.filter(user => user.username === username);\n      console.log(activeUser);\n      this.setState({\n        activeUser\n      }); //temporarily setting state if username matches, need way to also check password\n      // if (password === activeUser.password) {\n      //   this.setState({ activeUser: activeUser });\n      // }\n    };\n\n    this.checkIfLoggedIn = () => {\n      if (this.state.activeUser.length > 0) {\n        return /*#__PURE__*/React.createElement(GameShow, {\n          words: this.state.level,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 14\n          }\n        });\n      } else {\n        // this.parseUsernames()\n        return /*#__PURE__*/React.createElement(UserBar, {\n          logIn: this.UserLogin,\n          postUser: this.createUser,\n          refreshUsers: this.fetchUsers,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 9\n          }\n        });\n      }\n    };\n\n    this.state = {\n      level: [],\n      monsters: [],\n      users: [],\n      activeUser: [],\n      words: [],\n      bossWords: [],\n      activeWords: [],\n      wordCounter: 0,\n      currentScore: 0,\n      gameTimer: 120,\n      gameRunning: false\n    };\n  } //initial setup for game data\n\n\n  componentDidMount() {\n    this.fetchLevel();\n    this.fetchUsers();\n    this.fetchMonsters();\n  } //****FETCH FUNCTIONS THAT FOR SOME REASON I COULDN'T REFACTOR?? REACT IS DUMB****//\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(GameHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }\n    }), this.checkIfLoggedIn(), this.state.activeUser.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundImage: `url(${background})`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(GameFooter, {\n      logOut: this.logOut,\n      gameStartWords: this.setActiveWordsGameStart,\n      addScore: this.addScore,\n      currentScore: this.state.currentScore,\n      autoFeed: this.keepActiveWordsAtFive,\n      words: this.state.activeWords,\n      checkValue: this.checkValue,\n      addWord: this.addWordToActiveWord,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: footerlogo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dane/Development/code/KeySword-frontend/src/App.js"],"names":["React","Component","GameHeader","GameShow","GameFooter","UserBar","background","footerlogo","baseURL","App","constructor","fetchLevel","fetch","then","resp","json","level","setState","fetchUsers","users","fetchMonsters","monsters","createWordsArray","wordsString","words","split","shuffleArray","console","log","logOut","activeUser","bossWords","activeWords","wordCounter","currentScore","gameTimer","gameRunning","checkValue","word","index","state","indexOf","splice","addWordToActiveWord","wordArray","length","newWord","setActiveWordsGameStart","newWords","slice","addScore","keepActiveWordsAtFive","array","i","j","Math","floor","random","createUser","userObject","UserLogin","username","password","filter","user","checkIfLoggedIn","componentDidMount","render","backgroundImage","display","justifyContent"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,UAAP,MAAuB,2CAAvB;AACA,OAAOC,UAAP,MAAuB,sCAAvB;AAEA,IAAIC,OAAO,GAAG,wBAAd;;AACA,MAAMC,GAAN,SAAkBR,SAAlB,CAA4B;AAC1BS,EAAAA,WAAW,GAAG;AACZ;;AADY,SAwBdC,UAxBc,GAwBD,MAAM;AACjB,aAAOC,KAAK,CAACJ,OAAO,GAAG,QAAX,CAAL,CACJK,IADI,CACEC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADX,EAEJF,IAFI,CAEEG,KAAD,IAAW,KAAKC,QAAL,CAAc;AAAED,QAAAA;AAAF,OAAd,CAFZ,CAAP;AAGD,KA5Ba;;AAAA,SA6BdE,UA7Bc,GA6BD,MAAM;AACjB,aAAON,KAAK,CAACJ,OAAO,GAAG,OAAX,CAAL,CACJK,IADI,CACEC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADX,EAEJF,IAFI,CAEEM,KAAD,IAAW,KAAKF,QAAL,CAAc;AAAEE,QAAAA;AAAF,OAAd,CAFZ,CAAP;AAGD,KAjCa;;AAAA,SAkCdC,aAlCc,GAkCE,MAAM;AACpB,aAAOR,KAAK,CAACJ,OAAO,GAAG,UAAX,CAAL,CACJK,IADI,CACEC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADX,EAEJF,IAFI,CAEEQ,QAAD,IAAc,KAAKJ,QAAL,CAAc;AAAEI,QAAAA;AAAF,OAAd,CAFf,CAAP;AAGD,KAtCa;;AAAA,SA2CdC,gBA3Cc,GA2CMC,WAAD,IAAiB;AAClC,UAAIC,KAAK,GAAGD,WAAW,CAACE,KAAZ,CAAkB,IAAlB,CAAZ;AACA,WAAKC,YAAL,CAAkBF,KAAlB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,aAAOA,KAAP;AACD,KAhDa;;AAAA,SAkDdK,MAlDc,GAkDL,MAAM;AACb,WAAKZ,QAAL,CAAc;AACZD,QAAAA,KAAK,EAAE,EADK;AAEZK,QAAAA,QAAQ,EAAE,EAFE;AAGZF,QAAAA,KAAK,EAAE,EAHK;AAIZW,QAAAA,UAAU,EAAE,EAJA;AAKZN,QAAAA,KAAK,EAAE,EALK;AAMZO,QAAAA,SAAS,EAAE,EANC;AAOZC,QAAAA,WAAW,EAAE,EAPD;AAQZC,QAAAA,WAAW,EAAE,CARD;AASZC,QAAAA,YAAY,EAAE,CATF;AAUZC,QAAAA,SAAS,EAAE,GAVC;AAWZC,QAAAA,WAAW,EAAE;AAXD,OAAd;AAaD,KAhEa;;AAAA,SAmEdC,UAnEc,GAmEAC,IAAD,IAAU;AACrB,YAAMC,KAAK,GAAG,KAAKC,KAAL,CAAWR,WAAX,CAAuBS,OAAvB,CAA+BH,IAA/B,CAAd;;AACA,UAAIC,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd,aAAKtB,QAAL,CAAc,KAAKuB,KAAL,CAAWR,WAAX,CAAuBU,MAAvB,CAA8BH,KAA9B,EAAqC,CAArC,CAAd;AACD;AACF,KAxEa;;AAAA,SA2EdI,mBA3Ec,GA2EQ,MAAM;AAC1B,UAAIC,SAAS,GAAG,KAAKJ,KAAL,CAAWhB,KAA3B;AACA,UAAIS,WAAW,GAAG,KAAKO,KAAL,CAAWP,WAA7B;;AACA,UAAIW,SAAS,CAACC,MAAV,KAAqBZ,WAAzB,EAAsC;AACpCA,QAAAA,WAAW,GAAG,CAAd;AACD;;AACD,UAAIa,OAAO,GAAGF,SAAS,CAACX,WAAD,CAAvB;AACA,WAAKhB,QAAL,CAAc;AAAEe,QAAAA,WAAW,EAAE,CAAC,GAAG,KAAKQ,KAAL,CAAWR,WAAf,EAA4Bc,OAA5B;AAAf,OAAd;AACAb,MAAAA,WAAW,IAAI,CAAf;AAEA,WAAKhB,QAAL,CAAc;AAAEgB,QAAAA;AAAF,OAAd;AACD,KAtFa;;AAAA,SAyFdc,uBAzFc,GAyFY,MAAM;AAC9B,UAAIH,SAAS,GAAG,KAAKJ,KAAL,CAAWhB,KAA3B;AACA,UAAIS,WAAW,GAAG,KAAKO,KAAL,CAAWP,WAA7B;AACA,UAAIe,QAAQ,GAAGJ,SAAS,CAACK,KAAV,CAAgB,CAAhB,EAAmB,CAAnB,CAAf;AACA,WAAKhC,QAAL,CAAc;AAAEe,QAAAA,WAAW,EAAE,CAAC,GAAG,KAAKQ,KAAL,CAAWR,WAAf,EAA4B,GAAGgB,QAA/B;AAAf,OAAd;AACAf,MAAAA,WAAW,IAAI,CAAf;AACA,WAAKhB,QAAL,CAAc;AAAEgB,QAAAA;AAAF,OAAd;AACD,KAhGa;;AAAA,SAmGdiB,QAnGc,GAmGH,MAAM;AACf,UAAIhB,YAAY,GAAG,KAAKM,KAAL,CAAWN,YAA9B;AACAA,MAAAA,YAAY,IAAI,CAAhB;AACA,WAAKjB,QAAL,CAAc;AAAEiB,QAAAA;AAAF,OAAd;AACD,KAvGa;;AAAA,SA0GdiB,qBA1Gc,GA0GU,MAAM;AAC5B,UAAI,KAAKX,KAAL,CAAWR,WAAX,CAAuBa,MAAvB,GAAgC,CAApC,EAAuC;AACrC,aAAKF,mBAAL;AACD;AACF,KA9Ga;;AAAA,SAiHdjB,YAjHc,GAiHE0B,KAAD,IAAW;AACxB,WAAK,IAAIC,CAAC,GAAGD,KAAK,CAACP,MAAN,GAAe,CAA5B,EAA+BQ,CAAC,GAAG,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACzC,cAAMC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBJ,CAAC,GAAG,CAArB,CAAX,CAAV;AACA,SAACD,KAAK,CAACC,CAAD,CAAN,EAAWD,KAAK,CAACE,CAAD,CAAhB,IAAuB,CAACF,KAAK,CAACE,CAAD,CAAN,EAAWF,KAAK,CAACC,CAAD,CAAhB,CAAvB;AACD;AACF,KAtHa;;AAAA,SA0HdK,UA1Hc,GA0HAC,UAAD,IAAgB;AAC3BhC,MAAAA,OAAO,CAACC,GAAR,CAAY+B,UAAZ;AACA/C,MAAAA,KAAK,CAACJ,OAAO,GAAG,OAAX,EAAoBmD,UAApB,CAAL;AACD,KA7Ha;;AAAA,SAgIdC,SAhIc,GAgIF,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAClCnC,MAAAA,OAAO,CAACC,GAAR,CAAYiC,QAAZ,EAAsBC,QAAtB;AACA,WAAK7C,QAAL,CAAc;AAAEO,QAAAA,KAAK,EAAE,KAAKF,gBAAL,CAAsB,KAAKkB,KAAL,CAAWxB,KAAX,CAAiB,CAAjB,EAAoBQ,KAA1C;AAAT,OAAd;AACA,WAAKP,QAAL,CAAc;AACZc,QAAAA,SAAS,EAAE,KAAKT,gBAAL,CAAsB,KAAKkB,KAAL,CAAWxB,KAAX,CAAiB,CAAjB,EAAoBe,SAA1C;AADC,OAAd;AAGA,UAAID,UAAU,GAAG,KAAKU,KAAL,CAAWrB,KAAX,CAAiB4C,MAAjB,CACdC,IAAD,IAAUA,IAAI,CAACH,QAAL,KAAkBA,QADb,CAAjB;AAGAlC,MAAAA,OAAO,CAACC,GAAR,CAAYE,UAAZ;AACA,WAAKb,QAAL,CAAc;AAAEa,QAAAA;AAAF,OAAd,EAVkC,CAWlC;AACA;AACA;AACA;AACD,KA/Ia;;AAAA,SAkJdmC,eAlJc,GAkJI,MAAM;AACtB,UAAI,KAAKzB,KAAL,CAAWV,UAAX,CAAsBe,MAAtB,GAA+B,CAAnC,EAAsC;AACpC,4BAAO,oBAAC,QAAD;AAAU,UAAA,KAAK,EAAE,KAAKL,KAAL,CAAWxB,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OAFD,MAEO;AACL;AACA,4BACE,oBAAC,OAAD;AACE,UAAA,KAAK,EAAE,KAAK4C,SADd;AAEE,UAAA,QAAQ,EAAE,KAAKF,UAFjB;AAGE,UAAA,YAAY,EAAE,KAAKxC,UAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;AACF,KA/Ja;;AAEZ,SAAKsB,KAAL,GAAa;AACXxB,MAAAA,KAAK,EAAE,EADI;AAEXK,MAAAA,QAAQ,EAAE,EAFC;AAGXF,MAAAA,KAAK,EAAE,EAHI;AAIXW,MAAAA,UAAU,EAAE,EAJD;AAKXN,MAAAA,KAAK,EAAE,EALI;AAMXO,MAAAA,SAAS,EAAE,EANA;AAOXC,MAAAA,WAAW,EAAE,EAPF;AAQXC,MAAAA,WAAW,EAAE,CARF;AASXC,MAAAA,YAAY,EAAE,CATH;AAUXC,MAAAA,SAAS,EAAE,GAVA;AAWXC,MAAAA,WAAW,EAAE;AAXF,KAAb;AAaD,GAhByB,CAkB1B;;;AACA8B,EAAAA,iBAAiB,GAAG;AAClB,SAAKvD,UAAL;AACA,SAAKO,UAAL;AACA,SAAKE,aAAL;AACD,GAvByB,CAwB1B;;;AA0IA+C,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEG,KAAKF,eAAL,EAFH,EAGG,KAAKzB,KAAL,CAAWV,UAAX,CAAsBe,MAAtB,GAA+B,CAA/B,gBACC;AACE,MAAA,KAAK,EAAE;AACLuB,QAAAA,eAAe,EAAG,OAAM9D,UAAW;AAD9B,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKE,oBAAC,UAAD;AACE,MAAA,MAAM,EAAE,KAAKuB,MADf;AAEE,MAAA,cAAc,EAAE,KAAKkB,uBAFvB;AAGE,MAAA,QAAQ,EAAE,KAAKG,QAHjB;AAIE,MAAA,YAAY,EAAE,KAAKV,KAAL,CAAWN,YAJ3B;AAKE,MAAA,QAAQ,EAAE,KAAKiB,qBALjB;AAME,MAAA,KAAK,EAAE,KAAKX,KAAL,CAAWR,WANpB;AAOE,MAAA,UAAU,EAAE,KAAKK,UAPnB;AAQE,MAAA,OAAO,EAAE,KAAKM,mBARhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADD,gBAkBC;AACE,MAAA,KAAK,EAAE;AACL0B,QAAAA,OAAO,EAAE,MADJ;AAELC,QAAAA,cAAc,EAAE;AAFX,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAME;AAAK,MAAA,GAAG,EAAE/D,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CArBJ,CADF;AAiCD;;AApMyB;;AAsM5B,eAAeE,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport GameHeader from \"./GameHeader\";\nimport GameShow from \"./GameShow\";\nimport GameFooter from \"./GameFooter\";\nimport UserBar from \"./UserBar\";\nimport background from \"./sprites/backgrounds/stonebackground.jpg\";\nimport footerlogo from \"./sprites/backgrounds/footerlogo.png\";\n\nlet baseURL = \"http://localhost:3000/\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      level: [],\n      monsters: [],\n      users: [],\n      activeUser: [],\n      words: [],\n      bossWords: [],\n      activeWords: [],\n      wordCounter: 0,\n      currentScore: 0,\n      gameTimer: 120,\n      gameRunning: false,\n    };\n  }\n\n  //initial setup for game data\n  componentDidMount() {\n    this.fetchLevel();\n    this.fetchUsers();\n    this.fetchMonsters();\n  }\n  //****FETCH FUNCTIONS THAT FOR SOME REASON I COULDN'T REFACTOR?? REACT IS DUMB****//\n  fetchLevel = () => {\n    return fetch(baseURL + \"levels\")\n      .then((resp) => resp.json())\n      .then((level) => this.setState({ level }));\n  };\n  fetchUsers = () => {\n    return fetch(baseURL + \"users\")\n      .then((resp) => resp.json())\n      .then((users) => this.setState({ users }));\n  };\n  fetchMonsters = () => {\n    return fetch(baseURL + \"monsters\")\n      .then((resp) => resp.json())\n      .then((monsters) => this.setState({ monsters }));\n  };\n\n  //***Helper functions *//\n\n  //take level words string and add to state words array, shuffling into unique array each time\n  createWordsArray = (wordsString) => {\n    let words = wordsString.split(\", \");\n    this.shuffleArray(words);\n    console.log(words);\n    return words;\n  };\n\n  logOut = () => {\n    this.setState({\n      level: [],\n      monsters: [],\n      users: [],\n      activeUser: [],\n      words: [],\n      bossWords: [],\n      activeWords: [],\n      wordCounter: 0,\n      currentScore: 0,\n      gameTimer: 120,\n      gameRunning: false,\n    });\n  };\n\n  //function to remove a word from state.activeWords if the passed in word matches any instance inside the array\n  checkValue = (word) => {\n    const index = this.state.activeWords.indexOf(word);\n    if (index > -1) {\n      this.setState(this.state.activeWords.splice(index, 1));\n    }\n  };\n\n  //add single word from word array to active words on rotating basis without altering original word array\n  addWordToActiveWord = () => {\n    let wordArray = this.state.words;\n    let wordCounter = this.state.wordCounter;\n    if (wordArray.length === wordCounter) {\n      wordCounter = 0;\n    }\n    let newWord = wordArray[wordCounter];\n    this.setState({ activeWords: [...this.state.activeWords, newWord] });\n    wordCounter += 1;\n\n    this.setState({ wordCounter });\n  };\n\n  //basic anonymous function to add a block of 5 words to active words array\n  setActiveWordsGameStart = () => {\n    let wordArray = this.state.words;\n    let wordCounter = this.state.wordCounter;\n    let newWords = wordArray.slice(0, 5);\n    this.setState({ activeWords: [...this.state.activeWords, ...newWords] });\n    wordCounter += 5;\n    this.setState({ wordCounter });\n  };\n\n  //simple add one point to score anonymous function\n  addScore = () => {\n    let currentScore = this.state.currentScore;\n    currentScore += 1;\n    this.setState({ currentScore });\n  };\n\n  //currently keeps word list to 5\n  keepActiveWordsAtFive = () => {\n    if (this.state.activeWords.length < 5) {\n      this.addWordToActiveWord();\n    }\n  };\n\n  //Shuffle array to randomize gameplay\n  shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n\n  //create user model in DB,\n  //!!!!!!!!need to add uniqueness validation eventually!!!!!!!//\n  createUser = (userObject) => {\n    console.log(userObject);\n    fetch(baseURL + \"users\", userObject);\n  };\n\n  //given User object, check if input of username and password exists in database, if so set activeUser to username. Also, use this moment to setState of active words, which can be moved but is here to avoid asynch nonsense\n  UserLogin = (username, password) => {\n    console.log(username, password);\n    this.setState({ words: this.createWordsArray(this.state.level[0].words) });\n    this.setState({\n      bossWords: this.createWordsArray(this.state.level[0].bossWords),\n    });\n    let activeUser = this.state.users.filter(\n      (user) => user.username === username\n    );\n    console.log(activeUser);\n    this.setState({ activeUser });\n    //temporarily setting state if username matches, need way to also check password\n    // if (password === activeUser.password) {\n    //   this.setState({ activeUser: activeUser });\n    // }\n  };\n\n  //determines if component will render gameShow or userBar depnding on if state is logged in or not\n  checkIfLoggedIn = () => {\n    if (this.state.activeUser.length > 0) {\n      return <GameShow words={this.state.level} />;\n    } else {\n      // this.parseUsernames()\n      return (\n        <UserBar\n          logIn={this.UserLogin}\n          postUser={this.createUser}\n          refreshUsers={this.fetchUsers}\n        />\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <GameHeader />\n        {this.checkIfLoggedIn()}\n        {this.state.activeUser.length > 0 ? (\n          <div\n            style={{\n              backgroundImage: `url(${background})`,\n            }}\n          >\n            <GameFooter\n              logOut={this.logOut}\n              gameStartWords={this.setActiveWordsGameStart}\n              addScore={this.addScore}\n              currentScore={this.state.currentScore}\n              autoFeed={this.keepActiveWordsAtFive}\n              words={this.state.activeWords}\n              checkValue={this.checkValue}\n              addWord={this.addWordToActiveWord}\n            />\n          </div>\n        ) : (\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n            }}\n          >\n            <img src={footerlogo}></img>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}