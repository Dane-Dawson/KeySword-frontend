{"ast":null,"code":"var _jsxFileName = \"/Users/tomastobar/Development/code/flatiron_projects/KeySword/keysword-frontend/src/GameShow.js\";\nimport React, { Component } from 'react';\nimport TileSheetOne from './sprites/maps/tile_sheet01.png'; //WILL HAVE TO REMOBVE THIS ONCE THE INFORMATION FOR THE BACKGROUND IMAGE IS CAPTURED FROM THE INITIAL FETCH\n\nimport LevelOneBackGround from './sprites/maps/level_one_background.png';\n\nclass GameShow extends Component {\n  constructor() {\n    super();\n\n    this.renderBackGound = () => {\n      const bgTile = new Image();\n      bgTile.src = TileSheetOne; // debugger;\n\n      bgTile.onload = () => {\n        for (let i = this.state.backgroundMatrix.length - 1; i > -1; --i) {\n          let worldMatrix = this.state.mapMatrix[i];\n          console.log(`WorldMatrix ${worldMatrix}`);\n          let source_x = worldMatrix % this.state.tileSheetColumns * this.state.tileWidth;\n          console.log(`source_x${source_x}`);\n          let source_y = Math.floor(worldMatrix / this.state.tileSheetColumns) * this.state.tileHeight;\n          console.log(`source_y${source_y}`);\n          let destination_x = i % this.state.matrixColumns * this.state.tileWidth;\n          console.log(`destination_x${destination_x}`);\n          let destination_y = Math.floor(i / this.state.matrixColumns) * this.state.tileHeight;\n          console.log(`destination_y${destination_y}`); // debugger\n\n          this.state.context.drawImage(bgTile, source_x, source_y, 16, 16, destination_x, destination_y, this.state.tileWidth, this.state.tileHeight);\n        }\n      };\n    };\n\n    this.renderMap = () => {\n      const tile = new Image();\n      tile.src = TileSheetOne;\n\n      tile.onload = () => {\n        for (let i = this.state.mapMatrix.length - 1; i > -1; --i) {\n          let worldMatrix = this.state.mapMatrix[i];\n          console.log(`WorldMatrix ${worldMatrix}`);\n          let source_x = worldMatrix % this.state.tileSheetColumns * this.state.tileWidth;\n          console.log(`source_x${source_x}`);\n          let source_y = Math.floor(worldMatrix / this.state.tileSheetColumns) * this.state.tileHeight;\n          console.log(`source_y${source_y}`);\n          let destination_x = i % this.state.matrixColumns * this.state.tileWidth;\n          console.log(`destination_x${destination_x}`);\n          let destination_y = Math.floor(i / this.state.matrixColumns) * this.state.tileHeight;\n          console.log(`destination_y${destination_y}`); // debugger\n\n          this.state.context.drawImage(tile, source_x, source_y, 16, 16, destination_x, destination_y, this.state.tileWidth, this.state.tileHeight); //        void ctx.drawImage(image,      sx,       sy, sWidth, sHeight,            dx,            dy,              bdWidth,               dHeight);\n        }\n      };\n    };\n\n    this.state = {\n      canvasWidth: 800,\n      canvasHeight: 400,\n      context: null,\n      levelBackgroundImage: null,\n      tileSheetColumns: 8,\n      tileHeight: 16,\n      tileWidth: 16,\n      matrixColumns: 19,\n      mapMatrix: [32, 32, 21, 22, 22, 23, 19, 12, 18, 33, 33, 33, 21, 22, 22, 22, 22, 22, 22, 33, 33, 29, 30, 30, 19],\n      backgroundMatrix: []\n    };\n  }\n  /*\n  00 01 02 03 04 05 06 07\n  08 09 10 11 12 13 14 15 \n  16 17 18 19 20 21 22 23\n  24 25 26 27 28 29 30 31\n  32 33 34 35 36 37 38 39\n  40 41 42 43 44 45 46 47 \n  48 49 50 51 52 53 54 55\n  56 57 58 59 60 61 62 63 \n      */\n\n\n  componentDidMount() {\n    const cvs = document.getElementById(\"gameCanvas\");\n    const ctx = cvs.getContext('2d');\n    this.setState({\n      context: ctx\n    });\n    this.renderBackGound(); // this.renderMap()\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"gameCanvas\",\n      style: {\n        width: `${this.state.canvasWidth}px`,\n        height: `${this.state.canvasHeight}px`,\n        paddingRight: '0',\n        paddingLeft: '0',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        display: 'block',\n        border: \"20px solid white\",\n        backgroundColor: 'grey'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    });\n  }\n\n}\n\nexport default GameShow; //NOTES:\n// The hard numbers to drawImage for level one background is: 300x150","map":{"version":3,"sources":["/Users/tomastobar/Development/code/flatiron_projects/KeySword/keysword-frontend/src/GameShow.js"],"names":["React","Component","TileSheetOne","LevelOneBackGround","GameShow","constructor","renderBackGound","bgTile","Image","src","onload","i","state","backgroundMatrix","length","worldMatrix","mapMatrix","console","log","source_x","tileSheetColumns","tileWidth","source_y","Math","floor","tileHeight","destination_x","matrixColumns","destination_y","context","drawImage","renderMap","tile","canvasWidth","canvasHeight","levelBackgroundImage","componentDidMount","cvs","document","getElementById","ctx","getContext","setState","render","width","height","paddingRight","paddingLeft","marginLeft","marginRight","display","border","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport TileSheetOne from './sprites/maps/tile_sheet01.png'\n\n//WILL HAVE TO REMOBVE THIS ONCE THE INFORMATION FOR THE BACKGROUND IMAGE IS CAPTURED FROM THE INITIAL FETCH\nimport LevelOneBackGround from './sprites/maps/level_one_background.png'\n\nclass GameShow extends Component {\n    constructor() {\n        super();\n        this.state = {\n            canvasWidth: 800,\n            canvasHeight: 400,\n            context: null,\n            levelBackgroundImage: null,\n            tileSheetColumns: 8,\n            tileHeight: 16,\n            tileWidth: 16,\n            matrixColumns: 19,\n            mapMatrix: [\n                32, 32, 21, 22, 22, 23, 19, 12, 18, 33, 33, 33, 21, 22, 22, 22, 22, 22, 22,\n                33, 33, 29, 30, 30, 19\n\n            ],\n            backgroundMatrix: []\n        }\n    }\n\n    /*\n    00 01 02 03 04 05 06 07\n    08 09 10 11 12 13 14 15 \n    16 17 18 19 20 21 22 23\n    24 25 26 27 28 29 30 31\n    32 33 34 35 36 37 38 39\n    40 41 42 43 44 45 46 47 \n    48 49 50 51 52 53 54 55\n    56 57 58 59 60 61 62 63 \n   \n    */\n    componentDidMount() {\n        const cvs = document.getElementById(\"gameCanvas\")\n        const ctx = cvs.getContext('2d')\n        this.setState({ context: ctx })\n        this.renderBackGound()\n        // this.renderMap()\n    }\n\n    \n    \n    renderBackGound = () => {\n        const bgTile = new Image()\n        bgTile.src = TileSheetOne\n        // debugger;\n        bgTile.onload = () => {\n\n            for (let i = this.state.backgroundMatrix.length - 1; i > -1; --i) {\n\n                let worldMatrix = this.state.mapMatrix[i]\n                console.log(`WorldMatrix ${worldMatrix}`)\n\n                let source_x = (worldMatrix % this.state.tileSheetColumns) * this.state.tileWidth\n                console.log(`source_x${source_x}`)\n\n                let source_y = Math.floor(worldMatrix / this.state.tileSheetColumns) * this.state.tileHeight\n                console.log(`source_y${source_y}`)\n\n                let destination_x = (i % this.state.matrixColumns) * this.state.tileWidth\n                console.log(`destination_x${destination_x}`)\n\n                let destination_y = Math.floor(i / this.state.matrixColumns) * this.state.tileHeight\n                console.log(`destination_y${destination_y}`)\n                // debugger\n                this.state.context.drawImage(bgTile, source_x, source_y, 16, 16, destination_x, destination_y, this.state.tileWidth, this.state.tileHeight)\n\n\n            }\n        }\n    }\n\n        renderMap = () => {\n            const tile = new Image()\n            tile.src = TileSheetOne\n            tile.onload = () => {\n\n                for (let i = this.state.mapMatrix.length - 1; i > -1; --i) {\n\n                    let worldMatrix = this.state.mapMatrix[i]\n                    console.log(`WorldMatrix ${worldMatrix}`)\n\n                    let source_x = (worldMatrix % this.state.tileSheetColumns) * this.state.tileWidth\n                    console.log(`source_x${source_x}`)\n\n                    let source_y = Math.floor(worldMatrix / this.state.tileSheetColumns) * this.state.tileHeight\n                    console.log(`source_y${source_y}`)\n\n                    let destination_x = (i % this.state.matrixColumns) * this.state.tileWidth\n                    console.log(`destination_x${destination_x}`)\n\n                    let destination_y = Math.floor(i / this.state.matrixColumns) * this.state.tileHeight\n                    console.log(`destination_y${destination_y}`)\n                    // debugger\n                    this.state.context.drawImage(tile, source_x, source_y, 16, 16, destination_x, destination_y, this.state.tileWidth, this.state.tileHeight)\n                    //        void ctx.drawImage(image,      sx,       sy, sWidth, sHeight,            dx,            dy,              bdWidth,               dHeight);\n                }\n            }\n        }\n\n\n        render() {\n            return (\n                <canvas id=\"gameCanvas\" style={{\n                    width: `${this.state.canvasWidth}px`,\n                    height: `${this.state.canvasHeight}px`,\n                    paddingRight: '0',\n                    paddingLeft: '0',\n                    marginLeft: 'auto',\n                    marginRight: 'auto',\n                    display: 'block',\n                    border: \"20px solid white\",\n                    backgroundColor: 'grey'\n                }}\n                >\n\n                </canvas>\n            )\n        }\n    }\n    export default GameShow;\n\n\n//NOTES:\n// The hard numbers to drawImage for level one background is: 300x150"]},"metadata":{},"sourceType":"module"}