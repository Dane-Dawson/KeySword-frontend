{"ast":null,"code":"var _jsxFileName = \"/Users/tomastobar/Development/code/flatiron_projects/KeySword/keysword-frontend/src/GameShow.js\";\nimport React, { Component } from 'react';\nimport TileSheetOne from './sprites/maps/tile_sheet01.png'; //WILL HAVE TO REMOBVE THIS ONCE THE INFORMATION FOR THE BACKGROUND IMAGE IS CAPTURED FROM THE INITIAL FETCH\n\nimport LevelOneBackGround from './sprites/maps/level_one_background.png';\n\nclass GameShow extends Component {\n  constructor() {\n    super();\n\n    this.renderBackGound = () => {\n      const bg = new Image();\n      bg.src = LevelOneBackGround; // debugger;\n\n      bg.onload = () => {\n        this.state.context.drawImage(bg, 0, 0, 300, 150);\n      };\n    };\n\n    this.renderMap = () => {\n      const tile = new Image();\n      tile.src = TileSheetOne;\n\n      tile.onload = () => {\n        for (let i = this.state.matrix.length - 1; i > -1; --i) {\n          let worldMatrix = this.state.matrix[i];\n          console.log(`WorldMatrix ${worldMatrix}`);\n          let source_x = worldMatrix % this.state.tileSheetColumns * (this.state.tileWidth * 2);\n          console.log(`source_x${source_x}`);\n          let source_y = Math.floor(worldMatrix / this.state.tileSheetColumns) * (this.state.tileHeight * 2);\n          console.log(`source_y${source_y}`);\n          let destination_x = i % this.state.matrixColumns * this.state.tileWidth;\n          console.log(`destination_x${destination_x}`);\n          let destination_y = Math.floor(i / this.state.matrixColumns) * this.state.tileHeight;\n          console.log(`destination_y${destination_y}`); // debugger\n\n          this.state.context.drawImage(tile, source_x, source_y, 16, 16, destination_x, destination_y, this.state.tileWidth, this.state.tileHeight);\n        }\n      };\n    };\n\n    this.state = {\n      canvasWidth: 800,\n      canvasHeight: 400,\n      context: null,\n      levelBackgroundImage: null,\n      tileSheetColumns: 8,\n      tileHeight: 8,\n      tileWidth: 8,\n      matrixColumns: 38,\n      matrix: [48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48]\n    };\n  }\n\n  componentDidMount() {\n    const cvs = document.getElementById(\"gameCanvas\");\n    const ctx = cvs.getContext('2d');\n    this.setState({\n      context: ctx\n    }); // this.renderBackGound()\n\n    this.renderMap();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"gameCanvas\",\n      style: {\n        width: `${this.state.canvasWidth}px`,\n        height: `${this.state.canvasHeight}px`,\n        paddingRight: '0',\n        paddingLeft: '0',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        display: 'block',\n        border: \"20px solid white\",\n        backgroundColor: 'lightGreen'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default GameShow; //NOTES:\n// The hard numbers to drawImage for level one background is: 300x150","map":{"version":3,"sources":["/Users/tomastobar/Development/code/flatiron_projects/KeySword/keysword-frontend/src/GameShow.js"],"names":["React","Component","TileSheetOne","LevelOneBackGround","GameShow","constructor","renderBackGound","bg","Image","src","onload","state","context","drawImage","renderMap","tile","i","matrix","length","worldMatrix","console","log","source_x","tileSheetColumns","tileWidth","source_y","Math","floor","tileHeight","destination_x","matrixColumns","destination_y","canvasWidth","canvasHeight","levelBackgroundImage","componentDidMount","cvs","document","getElementById","ctx","getContext","setState","render","width","height","paddingRight","paddingLeft","marginLeft","marginRight","display","border","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport TileSheetOne from './sprites/maps/tile_sheet01.png'\n\n//WILL HAVE TO REMOBVE THIS ONCE THE INFORMATION FOR THE BACKGROUND IMAGE IS CAPTURED FROM THE INITIAL FETCH\nimport LevelOneBackGround from './sprites/maps/level_one_background.png'\n\nclass GameShow extends Component {\n    constructor() {\n        super();\n        this.state = {\n            canvasWidth: 800,\n            canvasHeight: 400,\n            context: null,\n            levelBackgroundImage: null,\n            tileSheetColumns: 8,\n            tileHeight: 8,\n            tileWidth: 8,\n            matrixColumns: 38,\n            matrix: [\n                48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,\n            ]\n        }\n    }\n\n    componentDidMount() {\n        const cvs = document.getElementById(\"gameCanvas\")\n        const ctx = cvs.getContext('2d')\n        this.setState({ context: ctx })\n        // this.renderBackGound()\n        this.renderMap()\n    }\n\n    renderBackGound = () => {\n        const bg = new Image()\n        bg.src = LevelOneBackGround\n        // debugger;\n        bg.onload = () => {\n            this.state.context.drawImage(bg, 0, 0, 300, 150)\n        }\n    }\n\n    renderMap = () => {\n        const tile = new Image()\n        tile.src = TileSheetOne\n        tile.onload = () => {\n\n            for (let i = this.state.matrix.length - 1; i > -1; --i) {\n\n                let worldMatrix = this.state.matrix[i]\n                console.log(`WorldMatrix ${worldMatrix}`)\n\n                let source_x = (worldMatrix % this.state.tileSheetColumns) * (this.state.tileWidth * 2)\n                console.log(`source_x${source_x}`)\n\n                let source_y = Math.floor(worldMatrix / this.state.tileSheetColumns) * (this.state.tileHeight * 2)\n                console.log(`source_y${source_y}`)\n\n                let destination_x = (i % this.state.matrixColumns) * this.state.tileWidth\n                console.log(`destination_x${destination_x}`)\n\n                let destination_y = Math.floor(i / this.state.matrixColumns) * this.state.tileHeight\n                console.log(`destination_y${destination_y}`)\n                // debugger\n                this.state.context.drawImage(tile, source_x, source_y, 16, 16, destination_x, destination_y, this.state.tileWidth, this.state.tileHeight)\n\n            }\n        }\n    }\n\n\n    render() {\n        return (\n            <canvas id=\"gameCanvas\" style={{\n                width: `${this.state.canvasWidth}px`,\n                height: `${this.state.canvasHeight}px`,\n                paddingRight: '0',\n                paddingLeft: '0',\n                marginLeft: 'auto',\n                marginRight: 'auto',\n                display: 'block',\n                border: \"20px solid white\",\n                backgroundColor: 'lightGreen'\n            }}\n            >\n\n            </canvas>\n        )\n    }\n}\nexport default GameShow;\n\n\n//NOTES:\n// The hard numbers to drawImage for level one background is: 300x150"]},"metadata":{},"sourceType":"module"}